void f_startRobotWD(void *arg){
    int err;
RT_TASK_INFO info;

    rt_task_inquire(NULL, &info);
    printf("Init %s\n", info.name);
    rt_sem_p(&sem_barrier, TM_INFINITE);

///////////////////////////////////
    rt_task_set_periodic(NULL, TM_NOW, 100000000);
    
    while (1) {
#ifdef _WITH_TRACE_
        printf("%s : Wait sem_startRoboWD\n", info.name);
#endif
        if(robotStarted==1){
            rt_sem_p(&sem_startRobot, TM_INFINITE);
    #ifdef _WITH_TRACE_
            printf("%s : sem_startRobotWD arrived => Start robot avec WD\n", info.name);
    #endif
            err = send_command_to_robot(DMB_START_WITH_WD);
            if (err == 0) {  // s'il y a un erreur
    #ifdef _WITH_TRACE_
                printf("%s : the robot is started\n", info.name);
    #endif
                rt_mutex_acquire(&mutex_robotStarted, TM_INFINITE);
                robotStarted = 1;
                rt_mutex_release(&mutex_robotStarted);
                MessageToMon msg;
/////////////////////////////////
                set_msgToMon_header(&msg, HEADER_STM_ACK);
                write_in_queue(&q_messageToMon, msg);
            } else {
                MessageToMon msg;
                set_msgToMon_header(&msg, HEADER_STM_NO_ACK);
                write_in_queue(&q_messageToMon, msg);
            }
        
        }
        else {
            err= send_command_to_robot(DMB_RELOAD_WD);
////////////////////////////////////////////
            rt_mutex_release(&mutex_compteur);
            if(err= ROBOT_TIMED_OUT){  //verifie quelle est le valeur retourne
                if(compteurVerifierCom >2){
                    send_message_to_monitor("LCD","Comm avec Robo est perdu");  
                    //envoye LOST DMB
                    close_communication_robot();
                    // initialise la communication a etat final ??
                }
                else {
                    compteurVerifierCom++;
                }  
            }else {
/////////////////////////////////
                compteurVerifierCom=0;   
            }
            
        }
        
        
        
    }


}






